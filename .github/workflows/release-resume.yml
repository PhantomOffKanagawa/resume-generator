name: Build and Release Resume PDF

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action_type:
        description: 'Action to perform'
        required: true
        default: 'build_only'
        type: choice
        options:
          # - skip
          - build_only
          - release
          - portfolio

jobs:
  determine-action:
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.check-commit.outputs.build }}
      build_only: ${{ steps.check-commit.outputs.build_only }}
      release: ${{ steps.check-commit.outputs.release }}
      pr_portfolio: ${{ steps.check-commit.outputs.pr_portfolio }}
      # skip: ${{ steps.check-commit.outputs.skip }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Check commit message or workflow inputs
        id: check-commit
        run: |
          # Default to build only
          SHOULD_BUILD=true
          SHOULD_RELEASE=false
          SHOULD_PR_PORTFOLIO=false
          SHOULD_SKIP=false
          
          # Check if this is a workflow dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Workflow dispatch triggered with action: ${{ github.event.inputs.action_type }}"
            
            # Set action based on workflow dispatch input
            if [[ "${{ github.event.inputs.action_type }}" == "release" ]]; then
              SHOULD_BUILD=true
              SHOULD_RELEASE=true
            elif [[ "${{ github.event.inputs.action_type }}" == "portfolio" ]]; then
              SHOULD_BUILD=true
              SHOULD_RELEASE=true
              SHOULD_PR_PORTFOLIO=true
            fi

          else
            # This is a push event, check commit message
            COMMIT_MSG=$(git log -1 --pretty=%B)
            echo "Commit message: $COMMIT_MSG"
            
            # Check for skip keyword
            if [[ "$COMMIT_MSG" == *"[skip]"* ]]; then
              SHOULD_BUILD=false
              SHOULD_SKIP=true
              echo "Skipping all actions as requested in commit message"
            # Check for release keyword
            elif [[ "$COMMIT_MSG" == *"[release]"* ]]; then
              SHOULD_BUILD=true
              SHOULD_RELEASE=true
            # Check for portfolio PR keyword
            elif [[ "$COMMIT_MSG" == *"[portfolio]"* ]]; then
              SHOULD_BUILD=true
              SHOULD_RELEASE=true
              SHOULD_PR_PORTFOLIO=true
            fi
          fi
          
          # Set outputs
          echo "build=$SHOULD_BUILD" >> $GITHUB_OUTPUT
          echo "release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "pr_portfolio=$SHOULD_PR_PORTFOLIO" >> $GITHUB_OUTPUT
          echo "skip=$SHOULD_SKIP" >> $GITHUB_OUTPUT

  build-and-release:
    needs: determine-action
    if: ${{ needs.determine-action.outputs.build == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jinja2 pyyaml pdflatex argparse
          sudo apt-get update && sudo apt-get install -y texlive-latex-base texlive-latex-recommended texlive-latex-extra

      - name: Get version
        id: version
        run: |
          VERSION=$(date +'%Y.%m.%d-%H%M')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate PDF with version
        run: |
          python resume_to_pdf.py --version "v${{ steps.version.outputs.version }}"

      - name: Generate Release Notes
        id: release_notes
        run: |
          echo "Resume as updated on $(date '+%B %d, %Y at %H:%M')" > release-notes.md
          echo "" >> release-notes.md
          if [ -f CHANGELOG.md ]; then
            echo "## Changelog" >> release-notes.md
            cat CHANGELOG.md >> release-notes.md
          else
            echo "_No changelog available._" >> release-notes.md
          fi

      - name: Create Release
        id: create_release
        if: ${{ needs.determine-action.outputs.release == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Resume Release ${{ steps.version.outputs.version }}
          files: resume.pdf
          body_path: release-notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload Resume PDF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: resume-pdf
          path: resume.pdf
          
  # Deploy to GitHub Pages
  deploy-pages:
    needs: [determine-action, build-and-release]
    if: ${{ needs.determine-action.outputs.release == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    # Configure GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download resume artifact
        uses: actions/download-artifact@v4
        with:
          name: resume-pdf
          path: public
          
      - name: Create index.html for GitHub Pages
        run: |
          cat > public/index.html << 'EOL'
          <!DOCTYPE html>
          <html lang="en">
              <head>
                  <meta charset="UTF-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <title>Resume - Harrison Surma</title>
                  <style>
                      body {
                          margin: 0;
                          padding: 0;
                          height: 100vh;
                          display: flex;
                          font-family: Arial, sans-serif;
                          background-color: #27272a;
                      }
                      .container {
                          max-width: 100vw;
                          width: 100%;
                          text-align: center;
                      }
                      .pdf-container {
                          width: 100%;
                          height: calc(100vh - 60px);
                          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                          margin-top: 0; /* Changed from 20px to 0 */
                      }
                      a.download-button {
                          display: inline-block;
                          margin-top: 10px;
                          padding: 10px 20px;
                          color: white;
                          outline: white solid 1px;
                          text-decoration: none;
                          border-radius: 4px;
                          font-weight: bold;
                          height: 20px;
                      }
                  </style>
              </head>
              <body>
                  <div class="container">
                      <!-- <h1>Harrison Surma - Resume</h1>
                      <p>Here is the latest version of my resume</p> -->
                      <div class="pdf-container">
                          <embed src="resume.pdf" type="application/pdf" width="100%" height="100%" />
                      </div>
                      <a href="resume.pdf" class="download-button" download>Download PDF</a>
                  </div>
              </body>
          </html>
          EOL
          
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
  # Create PR to portfolio repository
  update-portfolio:
    needs: [determine-action, build-and-release]
    if: ${{ needs.determine-action.outputs.pr_portfolio == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout portfolio repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/portfolio
          token: ${{ secrets.GITHUB_TOKEN }}
          path: portfolio
          
      - name: Download resume artifact
        uses: actions/download-artifact@v4
        with:
          name: resume-pdf
          
      - name: Copy resume to portfolio repository
        run: |
          cp resume.pdf portfolio/Harrison-Surma-Resume.pdf
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          # Personal Access Token to access the portfolio repository
          token: ${{ secrets.GH_PAT }}
          path: portfolio
          commit-message: "Update resume to version v${{ needs.build-and-release.outputs.version }}"
          title: "Update Harrison-Surma-Resume.pdf to latest version"
          body: |
            This PR updates the resume PDF to the latest version (v${{ needs.build-and-release.outputs.version }}).
            
            Automatically generated from resume-generator repository.
          branch: update-resume-${{ needs.build-and-release.outputs.version }}
          delete-branch: true
